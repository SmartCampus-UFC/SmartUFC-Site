version: "3.5"
services:
  # Orion is the context broker
  orion:
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - main-net
    expose:
      - "${ORION_PORT}"
    ports:
      - "7000:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel ${LOG_LEVEL}
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 5s

  # Cygnus is configured to persist to STH-Comet
  cygnus:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    depends_on:
      - mongo-db
    networks:
      - main-net
    expose:
      - "${CYGNUS_API_PORT}"
      - "${CYGNUS_MONGO_SERVICE_PORT}"
    ports:
      - "${CYGNUS_MONGO_SERVICE_PORT}:${CYGNUS_MONGO_SERVICE_PORT}" # localhost:5051
      - "${CYGNUS_API_PORT}:${CYGNUS_API_PORT}" # localhost:5080
    environment:
      - "CYGNUS_MONGO_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}" # Port that Cygnus listens on for operational reasons
      - "CYGNUS_MONGO_HOSTS=mongo-db:${MONGO_DB_PORT}" # Comma separated list of Mongo-DB servers which Cygnus will contact to persist historical context data
      - "CYGNUS_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}"
      - "CYGNUS_API_PORT=${CYGNUS_API_PORT}" # Port that Cygnus listens on for operational reasons
      - "CYGNUS_LOG_LEVEL=${LOG_LEVEL}" # The logging level for Cygnus
    healthcheck:
      test: curl --fail -s http://cygnus:${CYGNUS_API_PORT}/v1/version || exit 1

  # STH-Comet is persisting Short Term History to Mongo-DB
  sth-comet:
    image: fiware/sth-comet:${STH_COMET_VERSION}
    hostname: sth-comet
    container_name: fiware-sth-comet
    depends_on:
      - cygnus
      - mongo-db
    networks:
      - main-net
    ports:
      - "${STH_COMET_PORT}:${STH_COMET_PORT}" # localhost:8666
    environment:
      - STH_HOST=0.0.0.0
      - STH_PORT=${STH_COMET_PORT}
      - DB_PREFIX=sth_
      - DB_URI=mongo-db:${MONGO_DB_PORT}
      - LOGOPS_LEVEL=${LOG_LEVEL}
    healthcheck:
      test: curl --fail -s http://sth-comet:${STH_COMET_PORT}/version || exit 1

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      #- mosquitto
    networks:
      - main-net
    expose:
      - "${IOTA_NORTH_PORT}"
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context      
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}      
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=${LOG_LEVEL} # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement      
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_MQTT_HOST=${MOSQUITTO_HOST} # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=${MOSQUITTO_PORT} # The port the MQTT Broker is listening on to receive topics
      - IOTA_MQTT_KEEPALIVE=60
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource      
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
    healthcheck:
      interval: 5s

  # Database
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - main-net
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  # Mosquitto
  # mosquitto:
  #   image: eclipse-mosquitto:1.6.14
  #   hostname: mosquitto
  #   container_name: mosquitto
  #   expose:
  #     - "1883"
  #     - "9001"
  #   ports:
  #     - "1883:1883"
  #     - "9001:9001"
  #   volumes:
  #     - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  #   networks:
  #     - smart_net

# Network
networks:
  main-net:
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  mongo-db: ~
