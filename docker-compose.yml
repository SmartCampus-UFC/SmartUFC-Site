version: "3.5"
services:
  # Orion is the context broker
  orion:
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - main-net
    expose:
      - "${ORION_PORT}"
    ports:
      - "7000:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel ${LOG_LEVEL}
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 5s

  # Quantum Leap is persisting Short Term History to Crate-DB
  quantumleap:
    image: orchestracities/quantumleap:${QUANTUMLEAP_VERSION}
    hostname: quantumleap
    container_name: fiware-quantumleap
    networks:
      - main-net
    ports:
      - "${QUANTUMLEAP_PORT}:${QUANTUMLEAP_PORT}"
    depends_on:
      - crate-db
      - redis-db
    environment:
      - CRATE_HOST=crate-db
      - REDIS_HOST=redis-db
      - REDIS_PORT=${REDIS_PORT}
      - LOGLEVEL=DEBUG
    healthcheck:
      test: curl --fail -s http://quantumleap:${QUANTUMLEAP_PORT}/version || exit 1

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:      
      - orion
      - mosquitto
      #- mqttprovider
    networks:
      - main-net
    expose:
      - "${IOTA_NORTH_PORT}"
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context      
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}      
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=${LOG_LEVEL} # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement      
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_MQTT_HOST=${MOSQUITTO_HOST} # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=${MOSQUITTO_PORT} # The port the MQTT Broker is listening on to receive topics
      - IOTA_MQTT_KEEPALIVE=60
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource      
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
    healthcheck:
      interval: 5s

  # Database
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - main-net
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  crate-db:
    image: crate:${CRATE_VERSION}
    hostname: crate-db
    container_name: db-crate
    networks:
      - main-net
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    command: crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
    environment:
      - CRATE_HEAP_SIZE=2g # see https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting
    volumes:
      - crate-db:/data

  redis-db:
    image: redis:${REDIS_VERSION}
    hostname: redis-db
    container_name: db-redis
    networks:
      - main-net
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}" # localhost:6379
    volumes:
      - redis-db:/data

  # Other services
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    user: "${USER_ID}"
    container_name: grafana
    networks:
      - main-net
    depends_on:
      - crate-db
    ports:
      - "80:3000"
    environment:
      - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - ${GRAFANA_DATA_PATH}:/var/lib/grafana


  # Mosquitto
  mosquitto:
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - main-net

  # MQTT Provider
  #mqttprovider:
  #image: mqttprovider
  #hostname: mqttprovider
  #container_name: mqttprovider
  #restart: always
  #depends_on:
  #   - mosquitto
  #environment:      
  #   - MOSQUITTO_HOST=${MOSQUITTO_HOST} # The host name of the MQTT Broker
  #   - MOSQUITTO_PORT=${MOSQUITTO_PORT} # The port the MQTT Broker is listening on to receive topics
  # networks:
  #   - main-net


# Network
networks:
  main-net:
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  mongo-db: ~
  crate-db: ~
  redis-db: ~
  #grafana: ~
